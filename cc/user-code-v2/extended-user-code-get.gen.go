// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package usercodev2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandExtendedUserCodeGet cc.CommandID = 0x0C

func init() {
	gob.Register(ExtendedUserCodeGet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x63),
		Command:      cc.CommandID(0x0C),
		Version:      2,
	}, NewExtendedUserCodeGet)
}

func NewExtendedUserCodeGet() cc.Command {
	return &ExtendedUserCodeGet{}
}

// <no value>
type ExtendedUserCodeGet struct {
	UserIdentifier uint16

	Properties1 struct {
		ReportMore bool
	}
}

func (cmd ExtendedUserCodeGet) CommandClassID() cc.CommandClassID {
	return 0x63
}

func (cmd ExtendedUserCodeGet) CommandID() cc.CommandID {
	return CommandExtendedUserCodeGet
}

func (cmd ExtendedUserCodeGet) CommandIDString() string {
	return "EXTENDED_USER_CODE_GET"
}

func (cmd *ExtendedUserCodeGet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.UserIdentifier = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.ReportMore = payload[i]&0x01 == 0x01

	i += 1

	return nil
}

func (cmd *ExtendedUserCodeGet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.UserIdentifier)
		payload = append(payload, buf...)
	}

	{
		var val byte

		if cmd.Properties1.ReportMore {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
