// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package usercodev2

import (
	"encoding/gob"
	"errors"

	"github.com/opendoor-labs/gozw/cc"
)

const CommandCapabilitiesReport cc.CommandID = 0x07

func init() {
	gob.Register(CapabilitiesReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x63),
		Command:      cc.CommandID(0x07),
		Version:      2,
	}, NewCapabilitiesReport)
}

func NewCapabilitiesReport() cc.Command {
	return &CapabilitiesReport{}
}

// <no value>
type CapabilitiesReport struct {
	Properties1 struct {
		SupportedUserIdStatusBitMaskLength byte

		McdSupport bool

		McSupport bool
	}

	SupportedUserIdStatusBitMask []byte

	Properties2 struct {
		SupportedKeypadModesBitMaskLength byte

		MucsSupport bool

		MucrSupport bool

		UccSupport bool
	}

	SupportedKeypadModesBitMask []byte

	Properties3 struct {
		SupportedKeysBitMaskLength byte
	}

	SupportedKeysBitMask []byte
}

func (cmd CapabilitiesReport) CommandClassID() cc.CommandClassID {
	return 0x63
}

func (cmd CapabilitiesReport) CommandID() cc.CommandID {
	return CommandCapabilitiesReport
}

func (cmd CapabilitiesReport) CommandIDString() string {
	return "USER_CODE_CAPABILITIES_REPORT"
}

func (cmd *CapabilitiesReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.SupportedUserIdStatusBitMaskLength = (payload[i] & 0x1F)

	cmd.Properties1.McdSupport = payload[i]&0x40 == 0x40

	cmd.Properties1.McSupport = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[0+2]) & 0x1F
		cmd.SupportedUserIdStatusBitMask = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties2.SupportedKeypadModesBitMaskLength = (payload[i] & 0x1F)

	cmd.Properties2.MucsSupport = payload[i]&0x20 == 0x20

	cmd.Properties2.MucrSupport = payload[i]&0x40 == 0x40

	cmd.Properties2.UccSupport = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[2+2]) & 0x1F
		cmd.SupportedKeypadModesBitMask = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties3.SupportedKeysBitMaskLength = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[4+2]) & 0x0F
		cmd.SupportedKeysBitMask = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *CapabilitiesReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.SupportedUserIdStatusBitMaskLength) & byte(0x1F)

		if cmd.Properties1.McdSupport {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.Properties1.McSupport {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	if cmd.SupportedUserIdStatusBitMask != nil && len(cmd.SupportedUserIdStatusBitMask) > 0 {
		payload = append(payload, cmd.SupportedUserIdStatusBitMask...)
	}

	{
		var val byte

		val |= (cmd.Properties2.SupportedKeypadModesBitMaskLength) & byte(0x1F)

		if cmd.Properties2.MucsSupport {
			val |= byte(0x20) // flip bits on
		} else {
			val &= ^byte(0x20) // flip bits off
		}

		if cmd.Properties2.MucrSupport {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.Properties2.UccSupport {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	if cmd.SupportedKeypadModesBitMask != nil && len(cmd.SupportedKeypadModesBitMask) > 0 {
		payload = append(payload, cmd.SupportedKeypadModesBitMask...)
	}

	{
		var val byte

		val |= (cmd.Properties3.SupportedKeysBitMaskLength) & byte(0x0F)

		payload = append(payload, val)
	}

	if cmd.SupportedKeysBitMask != nil && len(cmd.SupportedKeysBitMask) > 0 {
		payload = append(payload, cmd.SupportedKeysBitMask...)
	}

	return
}
