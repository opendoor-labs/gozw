// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package switchcolorv3

import (
	"encoding/gob"
	"errors"

	"github.com/opendoor-labs/gozw/cc"
)

const CommandSet cc.CommandID = 0x05

func init() {
	gob.Register(Set{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x33),
		Command:      cc.CommandID(0x05),
		Version:      3,
	}, NewSet)
}

func NewSet() cc.Command {
	return &Set{}
}

// <no value>
type Set struct {
	Properties1 struct {
		ColorComponentCount byte
	}

	Duration byte

	Vg1 []SetVg1
}

type SetVg1 struct {
	ColorComponentId byte

	Value byte
}

func (cmd Set) CommandClassID() cc.CommandClassID {
	return 0x33
}

func (cmd Set) CommandID() cc.CommandID {
	return CommandSet
}

func (cmd Set) CommandIDString() string {
	return "SWITCH_COLOR_SET"
}

func (cmd *Set) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.ColorComponentCount = (payload[i] & 0x1F)

	i += 1

	for i < int(cmd.Properties1.ColorComponentCount) {

		vg1 := SetVg1{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		colorComponentId := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		value := payload[i]
		i++

		vg1.ColorComponentId = colorComponentId

		vg1.Value = value

		cmd.Vg1 = append(cmd.Vg1, vg1)
	}

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Duration = payload[i]
	i++

	return nil
}

func (cmd *Set) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.ColorComponentCount) & byte(0x1F)

		payload = append(payload, val)
	}

	for _, vg := range cmd.Vg1 {

		payload = append(payload, vg.ColorComponentId)

		payload = append(payload, vg.Value)

	}

	payload = append(payload, cmd.Duration)

	return
}
