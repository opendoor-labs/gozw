// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package doorlockv4

import (
	"encoding/gob"
	"errors"

	"github.com/opendoor-labs/gozw/cc"
)

const CommandCapabilitiesReport cc.CommandID = 0x08

func init() {
	gob.Register(CapabilitiesReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x62),
		Command:      cc.CommandID(0x08),
		Version:      4,
	}, NewCapabilitiesReport)
}

func NewCapabilitiesReport() cc.Command {
	return &CapabilitiesReport{}
}

// <no value>
type CapabilitiesReport struct {
	Properties1 struct {
		SupportedOperationTypeBitMaskLength byte
	}

	SupportedOperationTypeBitMask []byte

	SupportedDoorLockModeListLength byte

	SupportedDoorLockMode []byte

	Properties2 struct {
		SupportedInsideHandleModesBitmask byte

		SupportedOutsideHandleModesBitmask byte
	}

	SupportedDoorComponents byte

	Properties3 struct {
		Btbs bool

		Tas bool

		Hrs bool

		Ars bool
	}
}

func (cmd CapabilitiesReport) CommandClassID() cc.CommandClassID {
	return 0x62
}

func (cmd CapabilitiesReport) CommandID() cc.CommandID {
	return CommandCapabilitiesReport
}

func (cmd CapabilitiesReport) CommandIDString() string {
	return "DOOR_LOCK_CAPABILITIES_REPORT"
}

func (cmd *CapabilitiesReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.SupportedOperationTypeBitMaskLength = (payload[i] & 0x1F)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[0+2]) & 0x1F
		cmd.SupportedOperationTypeBitMask = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.SupportedDoorLockModeListLength = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[2+2]) & 0xFF
		cmd.SupportedDoorLockMode = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties2.SupportedInsideHandleModesBitmask = (payload[i] & 0x0F)

	cmd.Properties2.SupportedOutsideHandleModesBitmask = (payload[i] & 0xF0) >> 4

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.SupportedDoorComponents = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties3.Btbs = payload[i]&0x01 == 0x01

	cmd.Properties3.Tas = payload[i]&0x02 == 0x02

	cmd.Properties3.Hrs = payload[i]&0x04 == 0x04

	cmd.Properties3.Ars = payload[i]&0x08 == 0x08

	i += 1

	return nil
}

func (cmd *CapabilitiesReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.SupportedOperationTypeBitMaskLength) & byte(0x1F)

		payload = append(payload, val)
	}

	if cmd.SupportedOperationTypeBitMask != nil && len(cmd.SupportedOperationTypeBitMask) > 0 {
		payload = append(payload, cmd.SupportedOperationTypeBitMask...)
	}

	payload = append(payload, cmd.SupportedDoorLockModeListLength)

	if cmd.SupportedDoorLockMode != nil && len(cmd.SupportedDoorLockMode) > 0 {
		payload = append(payload, cmd.SupportedDoorLockMode...)
	}

	{
		var val byte

		val |= (cmd.Properties2.SupportedInsideHandleModesBitmask) & byte(0x0F)

		val |= (cmd.Properties2.SupportedOutsideHandleModesBitmask << byte(4)) & byte(0xF0)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.SupportedDoorComponents)

	{
		var val byte

		if cmd.Properties3.Btbs {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		if cmd.Properties3.Tas {
			val |= byte(0x02) // flip bits on
		} else {
			val &= ^byte(0x02) // flip bits off
		}

		if cmd.Properties3.Hrs {
			val |= byte(0x04) // flip bits on
		} else {
			val &= ^byte(0x04) // flip bits off
		}

		if cmd.Properties3.Ars {
			val |= byte(0x08) // flip bits on
		} else {
			val &= ^byte(0x08) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
